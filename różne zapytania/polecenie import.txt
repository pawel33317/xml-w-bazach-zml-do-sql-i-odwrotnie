--http://www.stat.gov.pl/broker/access/prefile/listPreFiles.jspa

--tabele na ca³e pliki
create table GUS_STATS(ID VARCHAR(20) NOT NULL, CONTENT XML);
select * from GUS_STATS;

--wykonaæ przez konsolê db2
--C:\Program Files\IBM\SQLLIB\BIN>db2 select * from gus_stats
--C:\Program Files\IBM\SQLLIB\BIN>db2 UPDATE DB CFG FOR proj USING logarchmeth1 OFF logarchmeth2 OFF logprimary 50 logsecond 8 logfilsiz 4096
--C:\Program Files\IBM\SQLLIB\BIN>db2stop force
--C:\Program Files\IBM\SQLLIB\BIN>db2start
--C:\Program Files\IBM\SQLLIB\BIN>db2 connect to proj
--C:\Program Files\IBM\SQLLIB\BIN>db2 IMPORT from C:\GusStatsXML\ALL.del of del xml from C:\GusStatsXML insert into GUS_STATS(ID, CONTENT)

--tabela na plik terc
drop table TERC;
create table TERC(
ID integer not null GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
WOJ  VARCHAR(9),
POW  VARCHAR(9),
GMI  VARCHAR(9),
RODZ  VARCHAR(9),
NAZWA VARCHAR(128),
NAZDOD VARCHAR(128));
select * from TERC;
--podzielenie danych XML terc.xml na analogiczny SQL
insert into TERC (WOJ, POW, GMI, RODZ, NAZWA, NAZDOD)
select X.* from (select * from GUS_STATS where ID = 'TERC') xmlp , XMLTABLE('$T/teryt/catalog/row' PASSING xmlp.CONTENT AS "T" COLUMNS
WOJ VARCHAR(9) PATH 'col[1]',
POW VARCHAR(9) PATH 'col[2]',
GMI VARCHAR(9) PATH 'col[3]',
RODZ VARCHAR(9) PATH 'col[4]',
NAZWA VARCHAR(128) PATH 'col[5]',
NAZDOD VARCHAR(128) PATH 'col[6]'
)AS X;


--tabela na plik ulic
drop table ULIC;
create table ULIC(
ID integer not null GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
WOJ  VARCHAR(4),
POW  VARCHAR(4),
GMI  VARCHAR(4),
RODZ_GMI  VARCHAR(4),
SYM  VARCHAR(10),
SYM_UL  VARCHAR(10),
CECHA  VARCHAR(128),
NAZWA_1  VARCHAR(128),
NAZWA_2  VARCHAR(128));
select * from ULIC;
--podzielenie danych XML ulic.xml na analogiczny SQL
insert into ULIC (WOJ, POW, GMI, RODZ_GMI, SYM, SYM_UL, CECHA, NAZWA_1, NAZWA_2)
select X.* from (select * from GUS_STATS where ID = 'ULIC') xmlp , XMLTABLE('$T/teryt/catalog/row' PASSING xmlp.CONTENT AS "T" COLUMNS
WOJ VARCHAR(4) PATH 'col[1]',
POW VARCHAR(4) PATH 'col[2]',
GMI VARCHAR(4) PATH 'col[3]',
RODZ_GMI VARCHAR(4) PATH 'col[4]',
SYM VARCHAR(10) PATH 'col[5]',
SYM_UL VARCHAR(10) PATH 'col[6]',
CECHA VARCHAR(128) PATH 'col[7]',
NAZWA_1 VARCHAR(128) PATH 'col[8]',
NAZWA_2 VARCHAR(128) PATH 'col[9]'
)AS X;
select * from ULIC;


--tabela na plik WMRODZ
drop table WMRODZ;
create table WMRODZ(
ID integer not null GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
RM  VARCHAR(4),
NAZWA_RM  VARCHAR(128));
select * from WMRODZ;
--podzielenie danych XML WMRODZ.xml na analogiczny SQL
insert into WMRODZ (RM, NAZWA_RM)
select X.* from (select * from GUS_STATS where ID = 'WMRODZ') xmlp , XMLTABLE('$T/teryt/catalog/row' PASSING xmlp.CONTENT AS "T" COLUMNS
RM VARCHAR(4) PATH 'col[1]',
NAZWA_RM VARCHAR(128) PATH 'col[2]')AS X;
select * from WMRODZ;


--tabela na plik SIMC
drop table SIMC;
create table SIMC(
ID integer not null GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
WOJ  VARCHAR(4),
POW  VARCHAR(4),
GMI  VARCHAR(4),
RODZ_GMI  VARCHAR(4),
MZ  VARCHAR(4),
NAZWA  VARCHAR(128),
SYM  VARCHAR(10),
SYMPOD  VARCHAR(10));
select * from WMRODZ;
--podzielenie danych XML SIMC.xml na analogiczny SQL
insert into SIMC (WOJ, POW, GMI, RODZ_GMI, MZ, NAZWA, SYM, SYMPOD)
select X.* from (select * from GUS_STATS where ID = 'SIMC') xmlp , XMLTABLE('$T/teryt/catalog/row' PASSING xmlp.CONTENT AS "T" COLUMNS
WOJ  VARCHAR(4) PATH 'col[1]',
POW  VARCHAR(4) PATH 'col[2]',
GMI  VARCHAR(4) PATH 'col[3]',
RODZ_GMI  VARCHAR(4) PATH 'col[4]',
MZ  VARCHAR(4) PATH 'col[5]',
NAZWA  VARCHAR(128) PATH 'col[6]',
SYM  VARCHAR(10) PATH 'col[7]',
SYMPOD  VARCHAR(10) PATH 'col[8]')AS X;
select * from SIMC;

--------------------MOJA STRUKTURA
drop table WOJEW;
create table WOJEW(WOJ int not null unique, NAZWA  VARCHAR(128));
insert into WOJEW (WOJ, NAZWA)select WOJ, NAZWA from TERC where NAZDOD = 'województwo';
select * from WOJEW;

drop table POWIAT;
create table POWIAT(POW int not null, WOJ int not null, NAZWA VARCHAR(128));
insert into POWIAT (POW, WOJ, NAZWA)select POW, WOJ, NAZWA from TERC where NAZDOD = 'powiat';
select * from POWIAT;

drop table MIASTO_POWIAT;
create table MIASTO_POWIAT(POW int not null, WOJ int not null, NAZWA VARCHAR(128));
insert into MIASTO_POWIAT (POW, WOJ, NAZWA)select POW, WOJ, NAZWA from TERC where NAZDOD LIKE '%na prawach powiatu';
select * from MIASTO_POWIAT;

drop table GMINY;
create table GMINY(GMI int not null, WOJ int not null, POW int, RODZ int, NAZWA VARCHAR(128), NAZDOD VARCHAR(128));
insert into GMINY (GMI, WOJ, POW, RODZ, NAZWA, NAZDOD)select GMI, WOJ, POW, RODZ, NAZWA, NAZDOD from TERC where NAZDOD LIKE 'gmina%';
select * from GMINY;

drop table MIASTA;
create table MIASTA(WOJ int not null, POW int not null, GMI int not null, RODZ int, NAZWA VARCHAR(128), NAZDOD VARCHAR(128));
insert into MIASTA (WOJ, POW, GMI, RODZ, NAZWA, NAZDOD)select WOJ, POW, GMI, RODZ, NAZWA, NAZDOD from TERC where NAZDOD = 'miasto';
select * from MIASTA;



--pobieranie w postaci sql
select POW, WOJ, NAZWA from TERC where NAZDOD LIKE '%na prawach powiatu';
select * from miasta where pow = (select pow from POWIAT where nazwa='³ódzki wschodni') and woj = (select woj from WOJEW where nazwa = '£ÓDZKIE');
select * from GMINY where pow = (select pow from POWIAT where nazwa='³ódzki wschodni') and woj = (select woj from WOJEW where nazwa = '£ÓDZKIE');


--pobieranie w postaci xml
select xmlelement (name "gmina", 
					xmlelement (name "nazwa", nazwa), 
					xmlelement (name "typ", nazdod)) OPTION ROOT "document"
from miasta where pow = (select pow from POWIAT where nazwa='³ódzki wschodni') and woj = (select woj from WOJEW where nazwa = '£ÓDZKIE');


SELECT XMLGROUP(
   nazwa AS "nazwa", nazdod AS "typ"
   ORDER BY nazwa OPTION ROW "gmina" ROOT "GMINY") 
from miasta where pow = (select pow from POWIAT where nazwa='³ódzki wschodni') and woj = (select woj from WOJEW where nazwa = '£ÓDZKIE');


--wynik w postaci xml do bazy
create table XMLRESULT(ID integer not null GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1), CONTENT xml);
insert into xmlresult(content)SELECT XMLGROUP(
   nazwa AS "nazwa", nazdod AS "typ"
   ORDER BY nazwa OPTION ROW "gmina" ROOT "GMINY") 
from miasta where pow = (select pow from POWIAT where nazwa='³ódzki wschodni') and woj = (select woj from WOJEW where nazwa = '£ÓDZKIE');

select * from XMLRESULT order by ID desc limit 1;




5--delegatury i dzielnice s¹ jeszcze w pliku TERC
1--ulice w pliku ULIC
3--rodzaje z pliku WMRODZ
2--miasta z pliku SIMC
  2--pomyslec co z dublami je¿eli s¹
4--widok do ³adnego wyci¹gania danych






load nie wykorzystuje dziennika transakcji wiêc jest szybsze

CREATE TABLE SQLPRODUCT(
PID VARCHAR(10) NOT NULL ,
NAME VARCHAR(128) ,
DETAILS VARCHAR(128) ,
PRICE DECIMAL(30,2)) ;

select * from product;


alter table sqlproduct add constraint pk_sqlproduct primary key (pid);




insert into SQLPRODUCT (Pid, Name, Details, Price)
select x.* from PRODUCT xmlp, XMLTABLE('$p/product/description' PASSING xmlp.description AS "p" COLUMNS
Pid VARCHAR(10) PATH '../@pid',
Name VARCHAR(128) path 'name',
Details VARCHAR(255) path 'details',
Price DECIMAL(30,2) path 'price'
)AS X;


select * from sqlproduct;